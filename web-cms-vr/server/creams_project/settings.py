"""
Django settings for TRUSTID project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

from datetime import timedelta
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY_CREAMS_PROJECT']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#DEBUG = False

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'creams-api.cognitiveux.net',
    '155.207.243.141',
    #'*',
]

CSRF_FAILURE_VIEW = 'web_app.views_utils.csrf_failure'

# Application definition
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'web_app',
    'rest_framework',
    'drf_yasg',
    'django_extensions',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'creams_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'creams_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'HOST': 'creams-postgres',
        'PORT': 5432,
        'PASSWORD': '$g$5tG76%aKjL9eBT4Yu%?C!$70)2^8wSUjfqQWUv^hJk4zgetGNA&4B#G_V#dHzCm*fQ-H'
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'web_app.exceptions.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}

# Override default settings of drf-yasg
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
   'USE_SESSION_AUTH': True,
   'DEFAULT_MODEL_DEPTH': -1, # This is used to hide the Models section in the UI
   'DEFAULT_MODEL_RENDERING': 'example', # Show the example value by default
}

# Override default settings of djangorestframework_simplejwt
SIMPLE_JWT = {
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'USER_ID_CLAIM': 'user_id',
    'ACCESS_TOKEN_LIFETIME': timedelta(days=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=365),
    'AUDIENCE': ["CognitiveUX",]
}

AUTH_USER_MODEL = "web_app.Users"

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

GLOBAL_SETTINGS = {
    'FROM_EMAIL': os.environ['SERVER_EMAIL'],
    'FROM_EMAIL_ALIAS': os.environ['SERVER_EMAIL_ALIAS'],
    'EMAIL_PASSWORD': os.environ['SERVER_EMAIL_PASSWORD'],
}

VERIFICATION_TYPES = {
    'ACCOUNT': {
        'msg_subject': "CREAMS - Code for Account Verification",
        'literal': "Account",
    },
    'RESET_PASSWORD': {
        'msg_subject': "CREAMS - Code for Password Reset",
        'literal': "Password Reset",
    },
}

"""
maps the input verification_type parameter given to web_app.views.send_verification_email to the correct model of the database.
The model classes have to be inside web_app.models
"""
MODEL_MAPPING = {
    'ACCOUNT': {
        'model_class': 'ActiveUsers',
        'resource_name': 'user'
    },
    'RESET_PASSWORD': {
        'model_class': 'ResetPassword',
        'resource_name': 'user'
    }
}

ALLOWED_REQUEST_INTERVAL = 3600 # How long the request interval will be for account verification email, currently 1 hour
RESET_PASSWORD_INTERVAL = 3600 # How long the request interval will be for password reset code email, currently 1 hour
FREQUENT_REQUEST_COUNT_LIMIT = 5 # 5 requests are allowed to be made within the allowed request interval
EMAIL_COUNTDOWN_SEC = 1 # the number of seconds for delaying the sending of the email


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Base url to serve media files  
MEDIA_URL = '/media/'  
  
# Path where media is stored  
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')  

# Celery settings
CELERY_TIMEZONE = TIME_ZONE
CELERY_RESULT_BACKEND = 'amqp'
# The place in which celery will store scheduled tasks in case the broker is restarted
CELERYD_STATE_DB = "./celery_worker_state"
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# CELERY_CELERYD_CONCURRENCY = 1
# CELERYD_CONCURRENCY = 1
CELERY_TASK_INTERVAL = 0.5 #the time that the caller of the task will retry to check if the task has finished
CELERY_TASK_TIME_LIMIT = 100

LOGGER_PATH = "./creams_project.log"

SERVER_VERSION = 1.0
WINDOWS_VERSION = 1.0
MACOS_VERSION = 1.0

DATA_UPLOAD_MAX_MEMORY_SIZE = 20971520

# Redirect to HTTPS - Uncomment the below for production env
# SECURE_SSL_REDIRECT = True

# Swagger HTTPS
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# CORS config
#CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    "https://creams-project.eu",
    "https://www.creams-project.eu",
    "http://creams-project.eu",
    "http://www.creams-project.eu",
]
